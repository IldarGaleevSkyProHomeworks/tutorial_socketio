DEFAULT_USERNAME = "–ê–Ω–æ–Ω–∏–º—É—Å"


def init_next_player(sio, game, playersmanager):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
    :param sio: socketio.Server
    :param game: –∏–≥—Ä–∞
    :param playersmanager: –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä–æ–∫–æ–≤
    :return:
    """
    if next_player := playersmanager.get_next_player():

        last_word = game.last_word

        if last_word:
            message = f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ \"{game.last_word}\""
        else:
            message = f"–¢–≤–æ–µ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º!"

        sio.emit(
            event='message',
            to=next_player.sid,
            data={"message": f"–¢–≤–æ–π —Ö–æ–¥! {message} –ø—Ä–∏—Å—ã–ª–∞–π —Å–æ–±—ã—Ç–∏–µ \"make_turn\" "
                             "—Å json-–æ–±—ä–µ–∫—Ç–æ–º: {\"word\":\"—Ç–≤–æ–π_–æ—Ç–≤–µ—Ç\"}"}
        )

        sio.emit(
            event='message',
            data={"message": f"–ì–æ–≤–æ—Ä–∏—Ç {next_player.name}, –∞ –º—ã –ø–æ–¥–æ–∂–¥–µ–º..."},
            skip_sid=next_player.sid
        )


def send_exit_message(sid, sio, playersmanager):
    """
    –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
    :param sio: socketio.Server
    :param game: –∏–≥—Ä–∞
    :param playersmanager: –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä–æ–∫–æ–≤
    :return:
    """
    player_info = playersmanager.get_player_name_by_sid(sid)

    if player_info:
        player_name = player_info
    else:
        player_name = DEFAULT_USERNAME

    sio.emit(
        event='message',
        data={"message": f"–ò–≥—Ä–æ–∫ {player_name} –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Å! Press F..."}
    )


def send_hello_message(sid, sio):
    """
    –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    :param sid: id –∫–ª–∏–µ–Ω—Ç–∞
    :param sio: socketio.Server
    :return:
    """
    sio.emit(
        event='message',
        to=sid,
        data={"message": "–°–∞–ª—é—Ç! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–æ–±—ã—Ç–∏–µ 'register' "
                         "—Å json-–æ–±—ä–µ–∫—Ç–æ–º: {\"player_name\": \"Your name\"} "
                         "–∏–ª–∏ 'login' "
                         "—Å json-–æ–±—ä–µ–∫—Ç–æ–º: {\"pk\": \"Your_personal_key\"}"})


def send_registered_message(sid, player_name, sio, playersmanager):
    """
    —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    :param sid: id –∫–ª–∏–µ–Ω—Ç–∞
    :param player_name: –∏–º—è –∏–≥—Ä–æ–∫–∞
    :param sio: socketio.Server
    :param playersmanager: –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä–æ–∫–æ–≤
    :return:
    """
    if player_name:
        pk, _ = playersmanager.register(sid, name=player_name)
        personal_message = f"–î–∞—Ä–æ–≤–∞, {player_name}, —Ç–≤–æ–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞: {pk}"
        public_message = f"–í –Ω–∞—à —É—é—Ç–Ω—ã–π –∫—Ä—É–∂–æ–∫ –∑–∞–ª–µ—Ç–∞–µ—Ç {player_name}, –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —á—Ç–æ –æ–Ω —Å–ø–æ—Å–æ–±–µ–Ω!"
    else:
        personal_message = "–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å... —Ç—ã —á–µ–≥–æ –º–Ω–µ –ø—Ä–∏—Å–ª–∞–ª?"
        public_message = None

    sio.emit(
        event='message',
        to=sid,
        data={"message": personal_message}
    )

    if public_message:
        sio.emit(
            event='message',
            data={"message": public_message},
            skip_sid=sid
        )


def send_logined_message(sid, personal_key, sio, playersmanager) -> bool:
    """
    —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    :param sid: id –∫–ª–∏–µ–Ω—Ç–∞
    :param personal_key: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–≥—Ä–æ–∫–∞
    :param sio: socketio.Server
    :param playersmanager: –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä–æ–∫–æ–≤
    :return:
    """
    is_logined = False
    public_message = None

    if personal_key:
        _, player = playersmanager.register(sid, pk=personal_key)
    else:
        player = None
        personal_message = "–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å... —Ç—ã —á–µ–≥–æ –º–Ω–µ –ø—Ä–∏—Å–ª–∞–ª?"

    if player:
        personal_message = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {player.name}"
        public_message = f"–ö –Ω–∞–º –≤–µ—Ä–Ω—É–ª—Å—è {player.name}!"
        is_logined = True
    else:
        personal_message = "–ù–µ—Ç —É –º–µ–Ω—è —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞... –ø–∞–¥–∞–∑—Ä–∏—Ç–µ–ª—å–Ω–∞, —Ç—ã —á–µ–≥–æ –∑–∞–¥—É–º–∞–ª!? üòë"

    sio.emit(
        event='message',
        to=sid,
        data={"message": personal_message}
    )

    if public_message:
        sio.emit(
            event='message',
            data={"message": public_message},
            skip_sid=sid
        )

    return is_logined


def check_word(sid, word, sio, game, playersmanager):
    """
    –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞
    :param sid: id –∫–ª–∏–µ–Ω—Ç–∞
    :param word: –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–µ —Å–ª–æ–≤–æ
    :param sio: socketio.Server
    :param game: –∏–≥—Ä–∞
    :param playersmanager: –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä–æ–∫–æ–≤
    :return:
    """
    if playersmanager.is_current_player(sid):

        player_name = playersmanager.get_player_name_by_sid(sid)
        is_correct = False

        if not word or len(word) < 2 or not word.isalpha():
            personal_message = "–®—Ç–∞–∞–∞!? –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ –∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.."
            public_message = f"{player_name} –≤—Ç–∏—Ä–∞–µ—Ç –Ω–∞–º –∫–∞–∫—É—é-—Ç–æ –¥–∏—á—å, –ø–æ—Å–ª—É—à–∞–µ–º –µ–≥–æ –µ—â–µ —Ä–∞–∑."
        elif game.test_word(word):
            personal_message = "–ö—Ä–∞—Å–∞–≤–∞!"
            public_message = f"{player_name} –æ—Ç–≤–µ—Ç–∏–ª \"{word}\", –æ—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω"
            is_correct = True
        else:
            personal_message = f"–ù–µ-–Ω–µ... —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç! –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ \"{game.last_word}\", –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ.."
            public_message = f"{player_name} –æ—Ç–≤–µ—Ç–∏–ª \"{word}\", –ø–æ—Å–ª—É—à–∞–µ–º –µ–≥–æ –µ—â–µ —Ä–∞–∑."

        sio.emit(
            event='message',
            to=sid,
            data={"message": personal_message}
        )

        sio.emit(
            event='message',
            data={"message": public_message},
            skip_sid=sid
        )

        if is_correct:
            init_next_player(sio, game, playersmanager)
    else:
        noname_message = ""
        if not playersmanager.get_player_name_by_sid(sid):
            noname_message = " –ò –≤–æ–æ–±—â–µ, –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è"
        sio.emit(
            event='message',
            to=sid,
            data={"message": f"–ê–∫—Å—Ç–∏—Å—å! –°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!{noname_message}"}
        )


def get_active_player(sid, sio, playersmanager):
    """
    –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    :param sid: id –∫–ª–∏–µ–Ω—Ç–∞
    :param sio: socketio.Server
    :param playersmanager: –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä–æ–∫–æ–≤
    :return:
    """
    if curr_player_name := playersmanager.get_current_player_name():
        message = f"–°–µ–π—á–∞—Å –≤—Å–µ –∂–¥—É—Ç \"{curr_player_name}\""
    else:
        message = "–•–º–º–º... –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é, –æ—Ç—Å—Ç–∞–Ω—å.."

    sio.emit(
        event='message',
        to=sid,
        data={"message": message}
    )


def is_data_valid(sid, sio, data) -> bool:
    if type(data) is not dict:
        sio.emit(
            event='message',
            to=sid,
            data={"message": "–ü—Ä–µ–∫—Ä–∞—Ç–∏ —Å–ª–∞—Ç—å –º–Ω–µ –µ—Ä—É–Ω–¥—É! –ü—Ä–∏—Å—ã–ª–∞–π JSON- —Ç–æ–≥–¥–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º..."}
        )
        return False
    return True
